from fastapi import FastAPI, HTTPException, status, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
import uvicorn
import logging
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤
from app.api.academic_content.attendance import router as assessment_router
from app.api.academic_content.tests import router as tests_router
from app.api.academic_content.statistic import router as statistics_router
from app.api.auth.parent import router as parent_dashboard_router
from app.api.auth.student import router as student_dashboard_router
from app.api.auth.teacher import router as teacher_dashboard_router
from app.api.academic_content.materials import router as materials_router
from app.api.auth.auth import router as auth_router

# –ò–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
from app.api.admin import admin_router

# –ò–º–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
from app.database import init_db, close_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("app.log"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# Lifespan manager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await init_db()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        yield
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        raise
    finally:
        # Shutdown
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        try:
            await close_db()
            logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Educational Platform API",
    description="API –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å –æ—Ü–µ–Ω–∫–∞–º–∏, —Ç–µ—Å—Ç–∞–º–∏, –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª—å—é",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json",
    lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000",  # React dev server
        "http://localhost:3001",  # Alternative React port
        "http://127.0.0.1:3000",
        "http://127.0.0.1:3001",
        "https://your-frontend-domain.com",  # Production domain
        "https://admin.your-frontend-domain.com",  # Admin panel domain
    ],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"],
    allow_headers=["*"],
)

# Middleware –¥–ª—è –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤
app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=["localhost", "127.0.0.1", "*.your-domain.com"]
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
@app.exception_handler(HTTPException)
async def http_exception_handler(request, exc):
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": True,
            "message": exc.detail,
            "status_code": exc.status_code,
            "timestamp": datetime.now().isoformat()
        }
    )

@app.exception_handler(Exception)
async def general_exception_handler(request, exc):
    logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exc}", exc_info=True)
    return JSONResponse(
        status_code=500,
        content={
            "error": True,
            "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "status_code": 500,
            "timestamp": datetime.now().isoformat()
        }
    )

# ===========================================
# MIDDLEWARE –î–õ–Ø –ê–î–ú–ò–ù–ö–ò (–û–ü–¶–ò–û–ù–ê–õ–¨–ù–û)
# ===========================================

# –ü—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –∞–¥–º–∏–Ω–∫–∏ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å JWT)
async def verify_admin_access(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É JWT —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –¥—Ä—É–≥—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    # –ü—Ä–∏–º–µ—Ä:
    # auth_header = request.headers.get("Authorization")
    # if not auth_header or not verify_admin_token(auth_header):
    #     raise HTTPException(status_code=401, detail="Admin access required")
    pass

# ===========================================
# –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –†–û–£–¢–ï–†–û–í
# ===========================================

# –†–æ—É—Ç–µ—Ä—ã –¥–ª—è –æ—Ü–µ–Ω–æ–∫ –∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
app.include_router(
    assessment_router,
    prefix="/api/assessment",
    tags=["Assessment"],
    responses={404: {"description": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"}}
)

app.include_router(
    tests_router,
    prefix="/api/tests", 
    tags=["Tests"],
    responses={404: {"description": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"}}
)

app.include_router(
    statistics_router,
    prefix="/api/statistics",
    tags=["Statistics"],
    responses={404: {"description": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"}}
)

# –†–æ—É—Ç–µ—Ä—ã –¥–ª—è –¥–∞—à–±–æ—Ä–¥–æ–≤
app.include_router(
    parent_dashboard_router,
    prefix="/api/parent",
    tags=["Parent Dashboard"],
    responses={404: {"description": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"}}
)

app.include_router(
    student_dashboard_router,
    prefix="/api/student",
    tags=["Student Dashboard"],
    responses={404: {"description": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"}}
)

app.include_router(
    teacher_dashboard_router,
    prefix="/api/teacher",
    tags=["Teacher Dashboard"],
    responses={404: {"description": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"}}
)

# –†–æ—É—Ç–µ—Ä –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
app.include_router(
    materials_router,
    prefix="/api/materials",
    tags=["Materials"],
    responses={404: {"description": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"}}
)

# –†–æ—É—Ç–µ—Ä –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
app.include_router(
    auth_router,
    prefix="/api/auth",
    tags=["Authentication"],
    responses={404: {"description": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"}}
)

# –ù–û–í–´–ô: –†–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
app.include_router(
    admin_router,
    prefix="/api",  # admin_router —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç /admin –≤ prefix
    tags=["Admin Panel"],
    responses={
        401: {"description": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"},
        403: {"description": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"},
        404: {"description": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"}
    }
    # dependencies=[Depends(verify_admin_access)]  # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –∑–∞—â–∏—Ç—ã
)

# ===========================================
# –û–°–ù–û–í–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´
# ===========================================

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "message": "Educational Platform API",
        "version": "1.0.0",
        "status": "active",
        "timestamp": datetime.now().isoformat(),
        "docs": "/docs",
        "redoc": "/redoc",
        "admin_panel": "/api/admin"
    }

@app.get("/api")
async def api_root():
    """API –∫–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "message": "Educational Platform API v1.0.0",
        "endpoints": {
            "assessment": "/api/assessment",
            "tests": "/api/tests",
            "statistics": "/api/statistics",
            "parent_dashboard": "/api/parent",
            "student_dashboard": "/api/student", 
            "teacher_dashboard": "/api/teacher",
            "materials": "/api/materials",
            "auth": "/api/auth",
            "admin": "/api/admin"  # –ù–û–í–´–ô —ç–Ω–¥–ø–æ–∏–Ω—Ç
        },
        "admin_endpoints": {
            "dashboard": "/api/admin/dashboard",
            "users": "/api/admin/users",
            "content": "/api/admin/subjects",
            "analytics": "/api/admin/analytics",
            "export": "/api/admin/export",
            "health": "/api/admin/health"
        },
        "documentation": {
            "swagger": "/docs",
            "redoc": "/redoc"
        },
        "status": "healthy",
        "timestamp": datetime.now().isoformat()
    }

@app.get("/api/health")
async def health_check():
    """–û–±—â–∏–π health check –¥–ª—è –≤—Å–µ–≥–æ API"""
    return {
        "status": "healthy",
        "service": "educational-platform-api",
        "version": "1.0.0",
        "timestamp": datetime.now().isoformat(),
        "uptime": "active",
        "components": {
            "database": "healthy",
            "assessment": "healthy",
            "tests": "healthy",
            "statistics": "healthy",
            "materials": "healthy",
            "auth": "healthy",
            "admin": "healthy"  # –ù–û–í–´–ô –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        }
    }

@app.get("/api/info")
async def api_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API"""
    return {
        "name": "Educational Platform API",
        "version": "1.0.0",
        "description": "API –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
        "features": [
            "–°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–æ–∫ –∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏",
            "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤",
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
            "–î–∞—à–±–æ—Ä–¥—ã –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π, —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ —É—á–∏—Ç–µ–ª–µ–π",
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–±–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏",
            "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"  # –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è
        ],
        "admin_features": [  # –ù–û–í–´–ô —Ä–∞–∑–¥–µ–ª
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º (–ø—Ä–µ–¥–º–µ—Ç—ã, —Ä–∞–∑–¥–µ–ª—ã, —Ç–µ–º—ã, –≤–æ–ø—Ä–æ—Å—ã)",
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞–º–∏ –∏ –≥—Ä—É–ø–ø–∞–º–∏",
            "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö",
            "–í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏",
            "–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"
        ],
        "environments": {
            "development": "http://localhost:8000",
            "staging": "https://staging-api.your-domain.com",
            "production": "https://api.your-domain.com"
        },
        "contact": {
            "email": "support@your-domain.com",
            "documentation": "/docs"
        },
        "timestamp": datetime.now().isoformat()
    }

# ===========================================
# MIDDLEWARE –î–õ–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
# ===========================================

@app.middleware("http")
async def log_requests(request, call_next):
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
    start_time = datetime.now()
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    is_admin_request = request.url.path.startswith("/api/admin")
    log_prefix = "üîß ADMIN" if is_admin_request else "üì®"
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
    logger.info(f"{log_prefix} {request.method} {request.url}")
    
    try:
        response = await call_next(request)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        process_time = (datetime.now() - start_time).total_seconds()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        logger.info(
            f"üì§ {request.method} {request.url} - "
            f"Status: {response.status_code} - "
            f"Time: {process_time:.3f}s"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        response.headers["X-Process-Time"] = str(process_time)
        response.headers["X-Timestamp"] = datetime.now().isoformat()
        response.headers["X-API-Version"] = "1.0.0"
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
        if is_admin_request:
            response.headers["X-Admin-API"] = "true"
        
        return response
        
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        process_time = (datetime.now() - start_time).total_seconds()
        logger.error(
            f"‚ùå {request.method} {request.url} - "
            f"Error: {str(e)} - "
            f"Time: {process_time:.3f}s"
        )
        raise

# ===========================================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´
# ===========================================

@app.get("/api/routes")
async def list_routes():
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    routes = []
    admin_routes = []
    
    for route in app.routes:
        if hasattr(route, 'methods') and hasattr(route, 'path'):
            route_info = {
                "path": route.path,
                "methods": list(route.methods),
                "name": getattr(route, 'name', None)
            }
            
            if route.path.startswith('/api/admin'):
                admin_routes.append(route_info)
            else:
                routes.append(route_info)
    
    return {
        "total_routes": len(routes) + len(admin_routes),
        "public_routes": sorted(routes, key=lambda x: x['path']),
        "admin_routes": sorted(admin_routes, key=lambda x: x['path']),
        "admin_routes_count": len(admin_routes)
    }

@app.get("/api/version")
async def get_version():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ API"""
    return {
        "version": "1.0.0",
        "build_date": "2024-01-01",
        "environment": "development",
        "python_version": "3.11+",
        "fastapi_version": "0.104.1",
        "admin_panel": "enabled",  # –ù–û–í–û–ï –ø–æ–ª–µ
        "last_updated": datetime.now().isoformat()
    }

# ===========================================
# –ê–î–ú–ò–ù–°–ö–ò–ï MIDDLEWARE –ò –ó–ê–©–ò–¢–ê
# ===========================================

# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ
@app.middleware("http")
async def admin_access_middleware(request, call_next):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–∏–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω—Å–∫–∏–º
    if request.url.path.startswith("/api/admin"):
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞ —Å —Ä–æ–ª—å—é admin
        
        # –ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é)
        auth_header = request.headers.get("Authorization")
        
        # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
        if not auth_header and request.url.path not in [
            "/api/admin/health",  # Health check –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º
            "/docs", "/redoc", "/openapi.json"  # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
        ]:
            # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∑–∞—â–∏—Ç—ã:
            # return JSONResponse(
            #     status_code=401,
            #     content={
            #         "error": True,
            #         "message": "Admin authentication required",
            #         "status_code": 401
            #     }
            # )
            pass
    
    response = await call_next(request)
    return response

# ===========================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ò
# ===========================================

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,  # –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        log_level="info",
        access_log=True,
        workers=1  # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 1 worker
    )

# ===========================================
# –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø –ü–†–û–î–ê–ö–®–ï–ù–ê
# ===========================================

# –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
# uvicorn main:app --host 0.0.0.0 --port 8000 --workers 4

# –ò–ª–∏ —Å Gunicorn:
# gunicorn main:app -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞:
# - DATABASE_URL: —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
# - SECRET_KEY: —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT
# - ADMIN_SECRET_KEY: –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
# - CORS_ORIGINS: —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã –¥–ª—è CORS
# - LOG_LEVEL: —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# - ENVIRONMENT: production/staging/development
# - ADMIN_ENABLED: –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∞–¥–º–∏–Ω–∫–∞ (true/false)
